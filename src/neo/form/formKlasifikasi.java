/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neo.form;

import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javafx.stage.FileChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import neo.table.Dataset;
import neo.table.naiveBayesPobabilitas;
import neo.table.peforma;
import neo.table.relevancy;
import neo.utils.C45;
import neo.utils.DatasetJpaController;
import neo.utils.SerializationUtil;
import neo.utils.consoleStream;
import neo.utils.methodUtil;

/**
 *
 * @author SEED
 */
public class formKlasifikasi extends javax.swing.JPanel {

    /**
     * Creates new form formKlasifikasi
     */
    
    private DatasetJpaController djp;
    private PrintStream printStream;
    
    public formKlasifikasi() {
        initComponents();
        djp = new DatasetJpaController(javax.persistence.Persistence.createEntityManagerFactory("analisiKomparasiPU"));
        printStream = new PrintStream(new consoleStream(jTextArea1));
        System.setOut(printStream);
//        System.setErr(printStream);
    }
    public void refresh()
    {
        int datasetCount = djp.getDatasetCount();
//        jFormattedTextField1.setValue(datasetCount);
        System.setOut(printStream);
//        System.setErr(printStream);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        listRelevancy = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new LinkedList<>());
        listPeforma = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(new LinkedList<>());
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jFormattedTextField5 = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jFormattedTextField4 = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAnalisis = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRelevancy = new javax.swing.JTable();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel7.setText("DARI");
        jPanel3.add(jLabel7);

        jFormattedTextField5.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField5.setText("100");
        jFormattedTextField5.setMinimumSize(new java.awt.Dimension(50, 30));
        jPanel3.add(jFormattedTextField5);

        jLabel6.setText("SAMPAI");
        jPanel3.add(jLabel6);

        jFormattedTextField4.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jFormattedTextField4.setText("200");
        jFormattedTextField4.setMinimumSize(new java.awt.Dimension(50, 30));
        jPanel3.add(jFormattedTextField4);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new java.awt.GridLayout(0, 1));

        jButton1.setText("MULAI KLASIFIKASI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        add(jPanel1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("PEFORMA"));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listPeforma, jTableAnalisis);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${info}"));
        columnBinding.setColumnName("Info");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${trainingTime}"));
        columnBinding.setColumnName("Training Time");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${trainningMemory}"));
        columnBinding.setColumnName("Trainning Memory");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${classficationMemory}"));
        columnBinding.setColumnName("Classfication Memory");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${classficationTime}"));
        columnBinding.setColumnName("Classfication Time");
        columnBinding.setColumnClass(Long.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(jTableAnalisis);

        jPanel2.add(jScrollPane2);

        add(jPanel2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("RELEVANCY"));

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listRelevancy, jTableRelevancy);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${info}"));
        columnBinding.setColumnName("Info");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${jumlahDataLatih}"));
        columnBinding.setColumnName("N LATIH");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${jumlahData}"));
        columnBinding.setColumnName("N TEST");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${TP}"));
        columnBinding.setColumnName("TP");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${TN}"));
        columnBinding.setColumnName("TN");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FP}"));
        columnBinding.setColumnName("FP");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FN}"));
        columnBinding.setColumnName("FN");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${PRE}"));
        columnBinding.setColumnName("PRE");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${TPR}"));
        columnBinding.setColumnName("TPR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${TNR}"));
        columnBinding.setColumnName("TNR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${PPV}"));
        columnBinding.setColumnName("PPV");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${NPV}"));
        columnBinding.setColumnName("NPV");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FNR}"));
        columnBinding.setColumnName("FNR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FPR}"));
        columnBinding.setColumnName("FPR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FDR}"));
        columnBinding.setColumnName("FDR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${FOR}"));
        columnBinding.setColumnName("FOR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ACC}"));
        columnBinding.setColumnName("ACC");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${f1}"));
        columnBinding.setColumnName("F1");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${MCC}"));
        columnBinding.setColumnName("MCC");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${BM}"));
        columnBinding.setColumnName("BM");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${DOR}"));
        columnBinding.setColumnName("DOR");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${LRplus}"));
        columnBinding.setColumnName("LRplus");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${LRminus}"));
        columnBinding.setColumnName("LRminus");
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane3.setViewportView(jTableRelevancy);

        add(jScrollPane3);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    private String getFileExtension(File file) {
        String name = file.getName();
        try {
            return name.substring(name.lastIndexOf(".") + 1);
        } catch (Exception e) {
            return "";
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("");
        long beforeUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(new FileNameExtensionFilter("Train Files", "KNN", "NB", "C45"));
        jfc.addChoosableFileFilter(new FileNameExtensionFilter("Train NB Files", "NB"));
        jfc.addChoosableFileFilter(new FileNameExtensionFilter("Train KNN Files", "KNN"));
        jfc.addChoosableFileFilter(new FileNameExtensionFilter("Train C45 Files", "C45"));
        int r = jfc.showOpenDialog(null);
        if (r == JFileChooser.CANCEL_OPTION) {
                batal(new UnsupportedOperationException("Not supported yet."));
        }
        peforma p = new peforma();
        Date now = new Date();
        System.out.println("now = " + now);
        File selectedFile = jfc.getSelectedFile();
        System.out.println("selectedFile = " + selectedFile);
        String fileExtension = getFileExtension(selectedFile);
        System.out.println("METODE KELASIFIKASI= " + fileExtension);        
        List<Dataset> findDatasetEntities = djp.findDatasetEntities();
//        List<Dataset> DataUji = new LinkedList<>(findDatasetEntities.subList(1000, 1100));        
        List<Dataset> DataUji = null;        
        if (fileExtension.equals("KNN")) {
            int reply = JOptionPane.showConfirmDialog(null
                    , jComboBox1
                    , "MASUKAN NILAI KNN K = "
                    , JOptionPane.OK_CANCEL_OPTION
                    , JOptionPane.PLAIN_MESSAGE);
            System.out.println("reply = " + reply);
            if (reply == JOptionPane.CANCEL_OPTION) {
                batal(new UnsupportedOperationException("Not supported yet."));
            }
            int K = jComboBox1.getSelectedIndex() + 1;
            System.out.println("K = " + K);
            Map<String, Object> deserialize;
            try {
                deserialize = (Map<String, Object>) SerializationUtil.deserialize(selectedFile.getPath());
                String metodePelatihan = (String) deserialize.get("TRAINNING");
                int metodePelatihanKey = (int) deserialize.get("TRAINNINGKEY");
                System.out.println("metodePelatihan = " + metodePelatihan);
                List<Dataset> DataLatih = (List<Dataset>) deserialize.get("DATA LATIH");
                if (metodePelatihanKey == 1) {
                        int jawab = JOptionPane.showConfirmDialog(null
                            , jPanel3
                            , "MASUKAN NILAI SUPPLY TEST"
                            , JOptionPane.OK_CANCEL_OPTION
                            , JOptionPane.PLAIN_MESSAGE);                    
                        if (jawab == JOptionPane.CANCEL_OPTION) {
                            batal(new UnsupportedOperationException("Not supported yet."));
                        }
                        String fromText = jFormattedTextField5.getText();
                        String toText = jFormattedTextField4.getText();
                        int from = Integer.valueOf(fromText);
                        int to = Integer.valueOf(toText);
                        DataUji = new LinkedList<>(findDatasetEntities.subList(from, to));
                } else if (metodePelatihanKey == 0) {
                        findDatasetEntities.removeAll(DataLatih);
                        DataUji = findDatasetEntities;
                        System.out.println("DataUji = " + DataUji.size());
                } else {
                }
                List<Dataset> KNN = methodUtil.KNN(DataLatih, DataUji, K);                
                relevancy R = new relevancy("KNN k="+ K);
                long trainMemory = (long) deserialize.get("MEMORY USE");
                long trainTime = (long) deserialize.get("TIME USE");
                p.setTrainingTime(trainTime);
                p.setTrainningMemory(trainMemory);
                p.setInfo("KNN k="+K);
                R.setJumlahData(DataUji.size());
                R.setJumlahDataLatih(DataLatih.size());
                Map<String, Long> collectTrue = 
                        DataUji
                                .stream()
                                .collect(Collectors.groupingBy( (Dataset e) -> e.getRelevancy(), Collectors.counting()));   
                System.out.println("collectTrue = " + collectTrue);
                double TP = collectTrue.get("TP") != null? collectTrue.get("TP"):0d;
                double TN = collectTrue.get("TN") != null? collectTrue.get("TN"):0d;
                double FP = collectTrue.get("FP") != null? collectTrue.get("FP"):0d;
                double FN = collectTrue.get("FN") != null? collectTrue.get("FN"):0d;
                R.setTP(TP);
                R.setTN(TN);
                R.setFP(FP);
                R.setFN(FN);                                
                listRelevancy.add(R);
                
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(formKlasifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (fileExtension.equals("NB")) {
            Map<String, Object> deserialize;
            try {
                deserialize = (Map<String, Object>) SerializationUtil.deserialize(selectedFile.getPath());
                String metodePelatihan = (String) deserialize.get("TRAINNING");
                int metodePelatihanKey = (int) deserialize.get("TRAINNINGKEY");
                System.out.println("metodePelatihan = " + metodePelatihan);
                List<Dataset> DataLatih = (List<Dataset>) deserialize.get("DATA LATIH");
                if (metodePelatihanKey == 1) {
                        int showConfirmDialog = JOptionPane.showConfirmDialog(null
                            , jPanel3
                            , "MASUKAN NILAI SUPPLY TEST"
                            , JOptionPane.OK_CANCEL_OPTION
                            , JOptionPane.PLAIN_MESSAGE);                    
                        if (showConfirmDialog == JOptionPane.CANCEL_OPTION) {
                            batal(new UnsupportedOperationException("Not supported yet."));
                        }

                        String fromText = jFormattedTextField5.getText();
                        String toText = jFormattedTextField4.getText();
                        int from = Integer.valueOf(fromText);
                        int to = Integer.valueOf(toText);
                        DataUji = new LinkedList<>(findDatasetEntities.subList(from, to));
                } else if (metodePelatihanKey == 0) {
                        findDatasetEntities.removeAll(DataLatih);
                        DataUji = findDatasetEntities;
                        System.out.println("DataUji = " + DataUji.size());
                } else {
                }                
                List<naiveBayesPobabilitas> NBtrain = (List<naiveBayesPobabilitas>) deserialize.get("NB TRAIN");
                methodUtil.NBclasificationAll(NBtrain, DataLatih, DataUji);
                int K = (int) deserialize.get("K");
                relevancy R = new relevancy("NB K="+ K);
                R.setJumlahDataLatih(DataLatih.size());
                long trainMemory = (long) deserialize.get("MEMORY USE");
                long trainTime = (long) deserialize.get("TIME USE");
                p.setTrainingTime(trainTime);
                p.setTrainningMemory(trainMemory);
                p.setInfo("NB K="+K);
                R.setJumlahData(DataUji.size());
                Map<String, Long> collectTrue = 
                        DataUji
                                .stream()
                                .collect(Collectors.groupingBy( (Dataset e) -> e.getRelevancy(), Collectors.counting()));   
                System.out.println("collectTrue = " + collectTrue);
                double TP = collectTrue.get("TP") != null? collectTrue.get("TP"):0d;
                double TN = collectTrue.get("TN") != null? collectTrue.get("TN"):0d;
                double FP = collectTrue.get("FP") != null? collectTrue.get("FP"):0d;
                double FN = collectTrue.get("FN") != null? collectTrue.get("FN"):0d;
                R.setTP(TP);
                R.setTN(TN);
                R.setFP(FP);
                R.setFN(FN);                                
                listRelevancy.add(R);
                
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(formKlasifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }
        else if (fileExtension.equals("C45")) {
            Map<String, Object> deserialize;
            try {
                deserialize = (Map<String, Object>) SerializationUtil.deserialize(selectedFile.getPath());
                String metodePelatihan = (String) deserialize.get("TRAINNING");
                int metodePelatihanKey = (int) deserialize.get("TRAINNINGKEY");
                System.out.println("metodePelatihan = " + metodePelatihan);
                List<Dataset> DataLatih = (List<Dataset>) deserialize.get("DATA LATIH");
                if (metodePelatihanKey == 1) {
                        int showConfirmDialog = JOptionPane.showConfirmDialog(null
                            , jPanel3
                            , "MASUKAN NILAI SUPPLY TEST"
                            , JOptionPane.OK_CANCEL_OPTION
                            , JOptionPane.PLAIN_MESSAGE);                    
                        if (showConfirmDialog == JOptionPane.CANCEL_OPTION) {
                            batal(new UnsupportedOperationException("Not supported yet."));
                        }

                        String fromText = jFormattedTextField5.getText();
                        String toText = jFormattedTextField4.getText();
                        int from = Integer.valueOf(fromText);
                        int to = Integer.valueOf(toText);
                        DataUji = new LinkedList<>(findDatasetEntities.subList(from, to));
                } else if (metodePelatihanKey == 0) {
                        findDatasetEntities.removeAll(DataLatih);
                        DataUji = findDatasetEntities;
                        System.out.println("DataUji = " + DataUji.size());
                } else {
                }                
                C45 C45train = (C45) deserialize.get("TREE");
                methodUtil.C45testing(C45train, DataUji);
                relevancy R = new relevancy("C45");
                R.setJumlahDataLatih(DataLatih.size());
                long trainMemory = (long) deserialize.get("MEMORY USE");
                long trainTime = (long) deserialize.get("TIME USE");
                p.setTrainingTime(trainTime);
                p.setTrainningMemory(trainMemory);
                p.setInfo("C45");
                R.setJumlahData(DataUji.size());
                Map<String, Long> collectTrue = 
                        DataUji
                                .stream()
                                .collect(Collectors.groupingBy( (Dataset e) -> e.getRelevancy(), Collectors.counting()));   
                System.out.println("collectTrue = " + collectTrue);
                double TP = collectTrue.get("TP") != null? collectTrue.get("TP"):0d;
                double TN = collectTrue.get("TN") != null? collectTrue.get("TN"):0d;
                double FP = collectTrue.get("FP") != null? collectTrue.get("FP"):0d;
                double FN = collectTrue.get("FN") != null? collectTrue.get("FN"):0d;
                R.setTP(TP);
                R.setTN(TN);
                R.setFP(FP);
                R.setFN(FN);                                
                listRelevancy.add(R);
                
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(formKlasifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }            
        
        
        }


        //memulai metode

        //akhir metode
        long afterUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
        Date end = new Date();
        System.out.println("end = " + end);
        p.setClassficationTime(end.getTime() - now.getTime());
        p.setClassficationMemory(afterUsedMem - beforeUsedMem);
        listPeforma.add(p);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formOlahData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formOlahData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formOlahData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formOlahData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame("PELATIHAN");
                frame.setContentPane(new formKlasifikasi());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setExtendedState(6);
                frame.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFormattedTextField jFormattedTextField4;
    private javax.swing.JFormattedTextField jFormattedTextField5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableAnalisis;
    private javax.swing.JTable jTableRelevancy;
    private javax.swing.JTextArea jTextArea1;
    private java.util.List<neo.table.peforma> listPeforma;
    private java.util.List<neo.table.relevancy> listRelevancy;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void batal(UnsupportedOperationException unsupportedOperationException) {
        JOptionPane.showMessageDialog(null, "Pembatalan Proese Klasifikasi");
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
